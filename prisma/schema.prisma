generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "Poop-backend"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/database"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

model Breed {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  nameKR    String?   @db.VarChar
  nameEN    String?   @db.VarChar
  avatar    String?   @db.VarChar
  profiles  Profile[]

  @@map("breeds")
}

model Profile {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  avatarUrl String?   @db.VarChar
  name      String    @db.VarChar(13)
  birthday  DateTime  @db.Timestamp(6)
  gender    Gender    @default(NONE)
  breedId   String    @db.Uuid
  breed     Breed     @relation(fields: [breedId], references: [id])

  user   User   @relation("profile", fields: [userId], references: [id])
  userId String @db.Uuid

  latestUser User? @relation("latestLoggedIn")

  @@map("profiles")
}

model User {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)
  accountId   String    @db.VarChar(20)
  password    String    @db.VarChar
  nickname    String    @unique @db.VarChar(20)
  email       String?   @unique @db.VarChar
  phone       String?   @unique @db.VarChar
  birthday    DateTime  @db.Date
  gender      Gender    @default(NONE)
  verified    DateTime? @db.Timestamp(6)
  latestToken String?   @db.VarChar

  profiles Profile[] @relation("profile")

  latestProfile   Profile? @relation(name: "latestLoggedIn", fields: [latestProfileId], references: [id])
  latestProfileId String?  @unique @db.Uuid

  verification verification? @relation("verification")

  @@map("users")
}

model verification {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  code      String    @db.VarChar

  user   User   @relation("verification", fields: [userId], references: [id])
  userId String @unique @db.Uuid
}

// view SearchBreeds {
//   id            String    @id @db.Uuid
//   createdAt     DateTime  @db.Timestamp(6)
//   updatedAt     DateTime  @updatedAt @db.Timestamp(6)
//   deletedAt     DateTime? @db.Timestamp(6)
//   nameKR        String    @db.VarChar
//   nameEN        String?   @db.VarChar
//   avatar        String?   @db.VarChar
//   searchKey     String
//   searchKeyCode Int?

//   @@map("search_breeds")
// }

model Graphics {
  id        String            @id @default(dbgenerated("uuid_generate_v4()"))
  createdAt DateTime          @default(now()) @db.Timestamp(6)
  updatedAt DateTime          @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt DateTime?         @db.Timestamp(6)
  name      String            @unique @db.VarChar
  url       String            @unique @db.VarChar
  type      GraphicType
  category  GraphicsCategory?

  @@map("graphics")
}

enum GraphicsCategory {
  Message
  Sticker
  Challenge
}

enum GraphicType {
  Lottie
  GIF

  @@map("graphics_type")
}

enum Gender {
  MALE
  FEMALE
  NONE
}
